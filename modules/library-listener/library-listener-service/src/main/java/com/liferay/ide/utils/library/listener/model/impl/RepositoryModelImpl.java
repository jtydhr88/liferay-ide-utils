/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.ide.utils.library.listener.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.ide.utils.library.listener.model.Repository;
import com.liferay.ide.utils.library.listener.model.RepositoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Repository service. Represents a row in the &quot;liblistener_Repository&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RepositoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RepositoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RepositoryImpl
 * @see Repository
 * @see RepositoryModel
 * @generated
 */
@ProviderType
public class RepositoryModelImpl extends BaseModelImpl<Repository>
	implements RepositoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a repository model instance should use the {@link Repository} interface instead.
	 */
	public static final String TABLE_NAME = "liblistener_Repository";
	public static final Object[][] TABLE_COLUMNS = {
			{ "repositoryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "repositoryName", Types.VARCHAR },
			{ "repositoryRootUrl", Types.VARCHAR },
			{ "repositoryUserName", Types.VARCHAR },
			{ "repositoryPassword", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("repositoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("repositoryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repositoryRootUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repositoryUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repositoryPassword", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table liblistener_Repository (repositoryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,repositoryName VARCHAR(75) null,repositoryRootUrl VARCHAR(500) null,repositoryUserName VARCHAR(75) null,repositoryPassword VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table liblistener_Repository";
	public static final String ORDER_BY_JPQL = " ORDER BY repository.repositoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY liblistener_Repository.repositoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(library.listener.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.ide.utils.library.listener.model.Repository"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(library.listener.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.ide.utils.library.listener.model.Repository"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(library.listener.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.ide.utils.library.listener.model.Repository"));

	public RepositoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _repositoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRepositoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _repositoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Repository.class;
	}

	@Override
	public String getModelClassName() {
		return Repository.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("repositoryId", getRepositoryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("repositoryName", getRepositoryName());
		attributes.put("repositoryRootUrl", getRepositoryRootUrl());
		attributes.put("repositoryUserName", getRepositoryUserName());
		attributes.put("repositoryPassword", getRepositoryPassword());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long repositoryId = (Long)attributes.get("repositoryId");

		if (repositoryId != null) {
			setRepositoryId(repositoryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String repositoryName = (String)attributes.get("repositoryName");

		if (repositoryName != null) {
			setRepositoryName(repositoryName);
		}

		String repositoryRootUrl = (String)attributes.get("repositoryRootUrl");

		if (repositoryRootUrl != null) {
			setRepositoryRootUrl(repositoryRootUrl);
		}

		String repositoryUserName = (String)attributes.get("repositoryUserName");

		if (repositoryUserName != null) {
			setRepositoryUserName(repositoryUserName);
		}

		String repositoryPassword = (String)attributes.get("repositoryPassword");

		if (repositoryPassword != null) {
			setRepositoryPassword(repositoryPassword);
		}
	}

	@Override
	public long getRepositoryId() {
		return _repositoryId;
	}

	@Override
	public void setRepositoryId(long repositoryId) {
		_repositoryId = repositoryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getRepositoryName() {
		if (_repositoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _repositoryName;
		}
	}

	@Override
	public void setRepositoryName(String repositoryName) {
		_repositoryName = repositoryName;
	}

	@Override
	public String getRepositoryRootUrl() {
		if (_repositoryRootUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _repositoryRootUrl;
		}
	}

	@Override
	public void setRepositoryRootUrl(String repositoryRootUrl) {
		_repositoryRootUrl = repositoryRootUrl;
	}

	@Override
	public String getRepositoryUserName() {
		if (_repositoryUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _repositoryUserName;
		}
	}

	@Override
	public void setRepositoryUserName(String repositoryUserName) {
		_repositoryUserName = repositoryUserName;
	}

	@Override
	public String getRepositoryPassword() {
		if (_repositoryPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _repositoryPassword;
		}
	}

	@Override
	public void setRepositoryPassword(String repositoryPassword) {
		_repositoryPassword = repositoryPassword;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Repository.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Repository toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Repository)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RepositoryImpl repositoryImpl = new RepositoryImpl();

		repositoryImpl.setRepositoryId(getRepositoryId());
		repositoryImpl.setGroupId(getGroupId());
		repositoryImpl.setCompanyId(getCompanyId());
		repositoryImpl.setUserId(getUserId());
		repositoryImpl.setUserName(getUserName());
		repositoryImpl.setCreateDate(getCreateDate());
		repositoryImpl.setModifiedDate(getModifiedDate());
		repositoryImpl.setRepositoryName(getRepositoryName());
		repositoryImpl.setRepositoryRootUrl(getRepositoryRootUrl());
		repositoryImpl.setRepositoryUserName(getRepositoryUserName());
		repositoryImpl.setRepositoryPassword(getRepositoryPassword());

		repositoryImpl.resetOriginalValues();

		return repositoryImpl;
	}

	@Override
	public int compareTo(Repository repository) {
		long primaryKey = repository.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Repository)) {
			return false;
		}

		Repository repository = (Repository)obj;

		long primaryKey = repository.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RepositoryModelImpl repositoryModelImpl = this;

		repositoryModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Repository> toCacheModel() {
		RepositoryCacheModel repositoryCacheModel = new RepositoryCacheModel();

		repositoryCacheModel.repositoryId = getRepositoryId();

		repositoryCacheModel.groupId = getGroupId();

		repositoryCacheModel.companyId = getCompanyId();

		repositoryCacheModel.userId = getUserId();

		repositoryCacheModel.userName = getUserName();

		String userName = repositoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			repositoryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			repositoryCacheModel.createDate = createDate.getTime();
		}
		else {
			repositoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			repositoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			repositoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		repositoryCacheModel.repositoryName = getRepositoryName();

		String repositoryName = repositoryCacheModel.repositoryName;

		if ((repositoryName != null) && (repositoryName.length() == 0)) {
			repositoryCacheModel.repositoryName = null;
		}

		repositoryCacheModel.repositoryRootUrl = getRepositoryRootUrl();

		String repositoryRootUrl = repositoryCacheModel.repositoryRootUrl;

		if ((repositoryRootUrl != null) && (repositoryRootUrl.length() == 0)) {
			repositoryCacheModel.repositoryRootUrl = null;
		}

		repositoryCacheModel.repositoryUserName = getRepositoryUserName();

		String repositoryUserName = repositoryCacheModel.repositoryUserName;

		if ((repositoryUserName != null) && (repositoryUserName.length() == 0)) {
			repositoryCacheModel.repositoryUserName = null;
		}

		repositoryCacheModel.repositoryPassword = getRepositoryPassword();

		String repositoryPassword = repositoryCacheModel.repositoryPassword;

		if ((repositoryPassword != null) && (repositoryPassword.length() == 0)) {
			repositoryCacheModel.repositoryPassword = null;
		}

		return repositoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{repositoryId=");
		sb.append(getRepositoryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", repositoryName=");
		sb.append(getRepositoryName());
		sb.append(", repositoryRootUrl=");
		sb.append(getRepositoryRootUrl());
		sb.append(", repositoryUserName=");
		sb.append(getRepositoryUserName());
		sb.append(", repositoryPassword=");
		sb.append(getRepositoryPassword());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.ide.utils.library.listener.model.Repository");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryName</column-name><column-value><![CDATA[");
		sb.append(getRepositoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryRootUrl</column-name><column-value><![CDATA[");
		sb.append(getRepositoryRootUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryUserName</column-name><column-value><![CDATA[");
		sb.append(getRepositoryUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryPassword</column-name><column-value><![CDATA[");
		sb.append(getRepositoryPassword());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Repository.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Repository.class
		};
	private long _repositoryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _repositoryName;
	private String _repositoryRootUrl;
	private String _repositoryUserName;
	private String _repositoryPassword;
	private Repository _escapedModel;
}